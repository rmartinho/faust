use std::iter::Iterator;

use crate::parse::{
    export_descr_unit::{
        Attr, Defense, Discipline, Formation, GroundBonus, StatBlock, Token, Unit, Weapon,
        WeaponAttr,
    },
    utils::UpToTwo,
};

grammar<'source>;

pub Units = "\n"* <Unit+>;

Unit: Unit =
        "type" <id:IdentSpace> "\n"+
        "dictionary" <key:Ident> "\n"+
        "category" <category:Ident> "\n"+
        "class" <class:Ident> "\n"+
        "voice_type" Ident+ "\n"+
        ("voice_indexes" int int int "\n"+)?
        <stats:StatBlock> "\n"+
        ("recruit_priority_offset" Float "\n"+)?
        "ownership" <ownership:SepBy<Ident, ",">> "\n"+
        ("ethnicity" Ident "," Ident ("," SepBy<Ident, ",">)? "\n"+)*
        ("tattoo_color" Ident "\n"+)?
        ("hair_color" Ident "\n"+)?
        ("hair_style" int "\n"+)?
        ("is_female" "\n"+)?
        <rebalanced_stats:("rebalance_statblock" "\n"+ <StatBlock> "\n"+)?>
    => Unit {<>};

StatBlock: StatBlock =
        "soldier" Ident "," <soldiers:int> "," int "," Float ("," Float "," Float)?"\n"+
        <officers:Officers>
        ("ship" Ident+ "\n"+)?
        ("engine" Ident+ "\n"+)?
        ("animal" Ident+ "\n"+)?
        <mount:("mount" <Mount> "\n"+)?>
        ("mount_effect" SepBy<(Ident Bonus), ","> "\n"+)?
        "attributes" <attributes:SepBy<Attr, ",">> "\n"+
        "formation" Float "," Float "," Float "," Float "," int "," <formations:SepBy<Formation, ",">> "\n"+
        "stat_health" <hp:int> "," <hp_mount:int> "\n"+
        <primary_weapon:Weapon<"stat_pri", "stat_pri_attr">>
        <secondary_weapon:Weapon<"stat_sec", "stat_sec_attr">>
        "stat_pri_armour" <defense:Defense> "\n"+
        "stat_sec_armour" <defense_mount:Defense> "\n"+
        "stat_heat" <heat:Bonus> "\n"+
        "stat_ground" <ground_bonus:GroundBonus> "\n"+
        "stat_mental" <morale:int> "," <discipline:Discipline> "," Ident "\n"+
        "stat_charge_dist" int "\n"+
        "stat_fire_delay" int "\n"+
        "stat_food" int "," int "\n"+
        "stat_cost" <turns:int> "," <cost:int> "," <upkeep:int> "," int "," int "," int
    => StatBlock {<>};

Mount: String = Ident+ => (<>).join(" ");

Attr: Attr = {
    "sea_faring" => Attr::SeaFaring,
    "hide_forest" => Attr::HideForest,
    "hide_improved_forest" => Attr::HideImprovedForest,
    "hide_long_grass" => Attr::HideLongGrass,
    "hide_anywhere" => Attr::HideAnywhere,
    "can_sap" => Attr::CanSap,
    "frighten_foot" => Attr::FrightenFoot,
    "frighten_mounted" => Attr::FrightenMounted,
    "can_run_amok" => Attr::CanRunAmok,
    "general_unit" => Attr::GeneralUnit,
    "general_unit_upgrade" <String> => Attr::GeneralUnitUpgrade(<>),
    "cantabrian_circle" => Attr::CantabrianCircle,
    "no_custom" => Attr::NoCustom,
    "command" => Attr::Command,
    "screeching_women" => Attr::ScreechingWomen,
    "mercenary_unit" => Attr::MercenaryUnit,
    "hardy" => Attr::Hardy,
    "very_hardy" => Attr::VeryHardy,
    "extremely_hardy" => Attr::ExtremelyHardy,
    "inexhaustible" => Attr::Inexhaustible,
    "warcry" => Attr::Warcry,
    "druid" => Attr::Druid,
    "power_charge" => Attr::PowerCharge,
    "can_swim" => Attr::CanSwim,
    "is_peasant" => Attr::IsPeasant,
    "can_horde" => Attr::CanHorde,
    "legionary_name" => Attr::LegionaryName,
    "infinite_ammo" => Attr::InfiniteAmmo,
    "non_scaling" => Attr::NonScaling,
};

Formation: Formation = {
    "square" => Formation::Square,
    "horde" => Formation::Horde,
    "phalanx" => Formation::Phalanx,
    "testudo" => Formation::Testudo,
    "wedge" => Formation::Wedge,
    "schiltrom" => Formation::Schiltrom,
    "shield_wall" => Formation::ShieldWall,
};

Discipline: Discipline = {
    "low" => Discipline::Low,
    "normal" => Discipline::Normal,
    "disciplined" => Discipline::Disciplined,
    "impetuous" => Discipline::Impetuous,
    "berserker" => Discipline::Berserker,
}

WeaponAttrs: Vec<WeaponAttr> = {
    <v:WeaponAttrs> "," <attr:WeaponAttr?>
        => match attr {
            None => v,
            Some(attr) => attr.push_to(v),
        },
    WeaponAttr => <>.to_vec(),
};

WeaponAttr: UpToTwo<WeaponAttr> = {
    "thrown" "ap" => UpToTwo::Two(WeaponAttr::Thrown, WeaponAttr::ArmorPiercing),
    "no" => UpToTwo::Zero,
    "ap" => UpToTwo::One(WeaponAttr::ArmorPiercing),
    "bp" => UpToTwo::One(WeaponAttr::BodyPiercing),
    "spear" => UpToTwo::One(WeaponAttr::Spear),
    "long_pike" => UpToTwo::One(WeaponAttr::LongPike),
    "short_pike" => UpToTwo::One(WeaponAttr::ShortPike),
    "light_spear" => UpToTwo::One(WeaponAttr::LightSpear),
    "prec" => UpToTwo::One(WeaponAttr::Precharge),
    "thrown" => UpToTwo::One(WeaponAttr::Thrown),
    "launching" => UpToTwo::One(WeaponAttr::Launching),
    "area" => UpToTwo::One(WeaponAttr::Area),
    "spear_bonus_4" => UpToTwo::One(WeaponAttr::SpearBonus(4)),
    "spear_bonus_6" => UpToTwo::One(WeaponAttr::SpearBonus(6)),
    "spear_bonus_8" => UpToTwo::One(WeaponAttr::SpearBonus(8)),
    "spear_bonus_10" => UpToTwo::One(WeaponAttr::SpearBonus(10)),
    "spear_bonus_12" => UpToTwo::One(WeaponAttr::SpearBonus(12)),
    "fire" => UpToTwo::One(WeaponAttr::Fire),
}

Officers: u32 = {
    Officer Officer Officer => 3,
    Officer Officer => 2,
    Officer => 1,
    => 0,
};
Officer: () = "officer" Ident "\n"+ => ();

GroundBonus: GroundBonus = <scrub:Bonus> "," <sand:Bonus> "," <forest:Bonus> "," <snow:Bonus>
    => GroundBonus {<>};

Weapon<StatKey, AttrKey>: Weapon =
        StatKey
        <factor:int> ","
        <charge:int> ","
        <missile:Ident> ","
        <range:int> ","
        <ammo:int> ","
        <weapon_type:Ident> ","
        Ident ","
        Ident ","
        Ident ","
        int
        <lethality:Lethality> "\n"+
        AttrKey <attributes:WeaponAttrs> "\n"+
    => Weapon {<>};

Lethality: f64 = ("," <Float>)? => (<>).unwrap_or(1.0);

Defense: Defense = {
    <armor:int> "," <skill:int> "," <shield:int> ("," Ident)+ => Defense {<>},
    <armor:int> "," <skill:int> ("," Ident)+ => Defense { <>, shield: 0 },
};

Bonus: i32 = {
    "+"? <n:int> => n as i32,
    "-" <n:int> => -(n as i32),
}

String: String = string => (<>).into();
Ident: String = {
    ident => (<>).into(),

    "type" => "type".into(),
    "dictionary" => "dictionary".into(),
    "category" => "category".into(),
    "class" => "class".into(),
    "voice_type" => "voice_type".into(),
    "voice_indexes" => "voice_indexes".into(),
    "soldier" => "soldier".into(),
    "officer" => "officer".into(),
    "ship" => "ship".into(),
    "engine" => "engine".into(),
    "animal" => "animal".into(),
    "mount" => "mount".into(),
    "mount_effect" => "mount_effect".into(),
    "attributes" => "attributes".into(),
    "formation" => "formation".into(),
    "stat_health" => "stat_health".into(),
    "stat_pri" => "stat_pri".into(),
    "stat_pri_attr" => "stat_pri_attr".into(),
    "stat_sec" => "stat_sec".into(),
    "stat_sec_attr" => "stat_sec_attr".into(),
    "stat_pri_armour" => "stat_pri_armour".into(),
    "stat_sec_armour" => "stat_sec_armour".into(),
    "stat_heat" => "stat_heat".into(),
    "stat_ground" => "stat_ground".into(),
    "stat_mental" => "stat_mental".into(),
    "stat_charge_dist" => "stat_charge_dist".into(),
    "stat_fire_delay" => "stat_fire_delay".into(),
    "stat_food" => "stat_food".into(),
    "stat_cost" => "stat_cost".into(),
    "ownership" => "ownership".into(),
    "ethnicity" => "ethnicity".into(),
    "rebalance_statblock" => "rebalance_statblock".into(),
    "recruit_priority_offset" => "recruit_priority_offset".into(),
    "tattoo_color" => "tattoo_color".into(),
    "hair_color" => "hair_color".into(),
    "hair_style" => "hair_style".into(),
    "is_female" => "is_female".into(),

    "sea_faring" => "sea_faring".into(),
    "hide_forest" => "hide_forest".into(),
    "hide_improved_forest" => "hide_improved_forest".into(),
    "hide_long_grass" => "hide_long_grass".into(),
    "hide_anywhere" => "hide_anywhere".into(),
    "can_sap" => "can_sap".into(),
    "frighten_foot" => "frighten_foot".into(),
    "frighten_mounted" => "frighten_mounted".into(),
    "can_run_amok" => "can_run_amok".into(),
    "general_unit" => "general_unit".into(),
    "general_unit_upgrade" => "general_unit_upgrade".into(),
    "cantabrian_circle" => "cantabrian_circle".into(),
    "no_custom" => "no_custom".into(),
    "command" => "command".into(),
    "screeching_women" => "screeching_women".into(),
    "mercenary_unit" => "mercenary_unit".into(),
    "hardy" => "hardy".into(),
    "very_hardy" => "very_hardy".into(),
    "extremely_hardy" => "extremely_hardy".into(),
    "inexhaustible" => "inexhaustible".into(),
    "warcry" => "warcry".into(),
    "druid" => "druid".into(),
    "power_charge" => "power_charge".into(),
    "can_swim" => "can_swim".into(),
    "is_peasant" => "is_peasant".into(),
    "can_horde" => "can_horde".into(),
    "legionary_name" => "legionary_name".into(),
    "infinite_ammo" => "infinite_ammo".into(),
    "non_scaling" => "non_scaling".into(),

    "square" => "square".into(),
    "horde" => "horde".into(),
    "phalanx" => "phalanx".into(),
    "testudo" => "testudo".into(),
    "wedge" => "wedge".into(),
    "schiltrom" => "schiltrom".into(),
    "shield_wall" => "shield_wall".into(),

    "low" => "low".into(),
    "normal" => "normal".into(),
    "disciplined" => "disciplined".into(),
    "impetuous" => "impetuous".into(),
    "berserker" => "berserker".into(),

    "ap" => "ap".into(),
    "bp" => "bp".into(),
    "spear" => "spear".into(),
    "long_pike" => "long_pike".into(),
    "short_pike" => "short_pike".into(),
    "light_spear" => "light_spear".into(),
    "prec" => "prec".into(),
    "thrown" => "thrown".into(),
    "launching" => "launching".into(),
    "area" => "area".into(),
    "spear_bonus_4" => "spear_bonus_4".into(),
    "spear_bonus_6" => "spear_bonus_6".into(),
    "spear_bonus_8" => "spear_bonus_8".into(),
    "spear_bonus_10" => "spear_bonus_10".into(),
    "spear_bonus_12" => "spear_bonus_12".into(),
    "fire" => "fire".into(),

    "no" => "no".into(),
};

IdentOrNum: String = {
    Ident => <>,
    int => format!("{}", <>),
};

IdentSpace: String = IdentOrNum+
    => (<>).into_iter()
        .fold(String::new(), |a, x| a + " " + &x)
        .trim().into();

Float: f64 = {
    float,
    int => <> as f64,
}

SepBy<T, Sep>: Vec<T> =
    <mut v:(<T> Sep)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    };

extern {
    type Location = usize;
    type Error = ();

    enum Token<'source> {
        "type" => Token::Ident("type"),
        "dictionary" => Token::Ident("dictionary"),
        "category" => Token::Ident("category"),
        "class" => Token::Ident("class"),
        "voice_type" => Token::Ident("voice_type"),
        "voice_indexes" => Token::Ident("voice_indexes"),
        "soldier" => Token::Ident("soldier"),
        "officer" => Token::Ident("officer"),
        "ship" => Token::Ident("ship"),
        "engine" => Token::Ident("engine"),
        "animal" => Token::Ident("animal"),
        "mount" => Token::Ident("mount"),
        "mount_effect" => Token::Ident("mount_effect"),
        "attributes" => Token::Ident("attributes"),
        "formation" => Token::Ident("formation"),
        "stat_health" => Token::Ident("stat_health"),
        "stat_pri" => Token::Ident("stat_pri"),
        "stat_pri_attr" => Token::Ident("stat_pri_attr"),
        "stat_sec" => Token::Ident("stat_sec"),
        "stat_sec_attr" => Token::Ident("stat_sec_attr"),
        "stat_pri_armour" => Token::Ident("stat_pri_armour"),
        "stat_sec_armour" => Token::Ident("stat_sec_armour"),
        "stat_heat" => Token::Ident("stat_heat"),
        "stat_ground" => Token::Ident("stat_ground"),
        "stat_mental" => Token::Ident("stat_mental"),
        "stat_charge_dist" => Token::Ident("stat_charge_dist"),
        "stat_fire_delay" => Token::Ident("stat_fire_delay"),
        "stat_food" => Token::Ident("stat_food"),
        "stat_cost" => Token::Ident("stat_cost"),
        "ownership" => Token::Ident("ownership"),
        "ethnicity" => Token::Ident("ethnicity"),
        "rebalance_statblock" => Token::Ident("rebalance_statblock"),
        "recruit_priority_offset" => Token::Ident("recruit_priority_offset"),
        "tattoo_color" => Token::Ident("tattoo_color"),
        "hair_color" => Token::Ident("hair_color"),
        "hair_style" => Token::Ident("hair_style"),
        "is_female" => Token::Ident("is_female"),

        "sea_faring" => Token::Ident("sea_faring"),
        "hide_forest" => Token::Ident("hide_forest"),
        "hide_improved_forest" => Token::Ident("hide_improved_forest"),
        "hide_long_grass" => Token::Ident("hide_long_grass"),
        "hide_anywhere" => Token::Ident("hide_anywhere"),
        "can_sap" => Token::Ident("can_sap"),
        "frighten_foot" => Token::Ident("frighten_foot"),
        "frighten_mounted" => Token::Ident("frighten_mounted"),
        "can_run_amok" => Token::Ident("can_run_amok"),
        "general_unit" => Token::Ident("general_unit"),
        "general_unit_upgrade" => Token::Ident("general_unit_upgrade"),
        "cantabrian_circle" => Token::Ident("cantabrian_circle"),
        "no_custom" => Token::Ident("no_custom"),
        "command" => Token::Ident("command"),
        "screeching_women" => Token::Ident("screeching_women"),
        "mercenary_unit" => Token::Ident("mercenary_unit"),
        "hardy" => Token::Ident("hardy"),
        "very_hardy" => Token::Ident("very_hardy"),
        "extremely_hardy" => Token::Ident("extremely_hardy"),
        "inexhaustible" => Token::Ident("inexhaustible"),
        "warcry" => Token::Ident("warcry"),
        "druid" => Token::Ident("druid"),
        "power_charge" => Token::Ident("power_charge"),
        "can_swim" => Token::Ident("can_swim"),
        "is_peasant" => Token::Ident("is_peasant"),
        "can_horde" => Token::Ident("can_horde"),
        "legionary_name" => Token::Ident("legionary_name"),
        "infinite_ammo" => Token::Ident("infinite_ammo"),
        "non_scaling" => Token::Ident("non_scaling"),

        "square" => Token::Ident("square"),
        "horde" => Token::Ident("horde"),
        "phalanx" => Token::Ident("phalanx"),
        "testudo" => Token::Ident("testudo"),
        "wedge" => Token::Ident("wedge"),
        "schiltrom" => Token::Ident("schiltrom"),
        "shield_wall" => Token::Ident("shield_wall"),

        "low" => Token::Ident("low"),
        "normal" => Token::Ident("normal"),
        "disciplined" => Token::Ident("disciplined"),
        "impetuous" => Token::Ident("impetuous"),
        "berserker" => Token::Ident("berserker"),

        "ap" => Token::Ident("ap"),
        "bp" => Token::Ident("bp"),
        "spear" => Token::Ident("spear"),
        "long_pike" => Token::Ident("long_pike"),
        "short_pike" => Token::Ident("short_pike"),
        "light_spear" => Token::Ident("light_spear"),
        "prec" => Token::Ident("prec"),
        "thrown" => Token::Ident("thrown"),
        "launching" => Token::Ident("launching"),
        "area" => Token::Ident("area"),
        "spear_bonus_4" => Token::Ident("spear_bonus_4"),
        "spear_bonus_6" => Token::Ident("spear_bonus_6"),
        "spear_bonus_8" => Token::Ident("spear_bonus_8"),
        "spear_bonus_10" => Token::Ident("spear_bonus_10"),
        "spear_bonus_12" => Token::Ident("spear_bonus_12"),
        "fire" => Token::Ident("fire"),

        "no" => Token::Ident("no"),

        "\n" => Token::Newline,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "," => Token::Comma,
        string => Token::String(<&'source str>),
        ident => Token::Ident(<&'source str>),
        int => Token::Int(<u32>),
        float => Token::Float(<f64>),
    }
}
